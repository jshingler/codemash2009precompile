h1. suggestQuery

h2. Summary

Suggest a new search query based on spelling

h2. Syntax

{code}
searchableService.suggestQuery(String query)
searchableService.suggestQuery(String query, Map options)
searchableService.suggestQuery(Map options, String query) // same as previous
{code}

{code}
DomainClass.suggestQuery(String query)
DomainClass.suggestQuery(String query, Map options)
DomainClass.suggestQuery(Map options, String query) // same as previous
{code}

h2. Description

Uses the spelling index to suggest an alternative query.

You need to add some sort of @spellCheck@ mapping for domain classes/properties that you wish to include in spelling index, either at the [class level|Searchable Plugin - Mapping - Class Mapping] or [property level|Searchable Plugin - Mapping - Searchable Property].

You can programmatically [re-build the spelling index|Searchable Plugin - Methods - rebuildSpellingSuggestions] if you like. This might be useful for testing, but otherwise don't worry, it is periodically refreshed automatically by Compass.

{info}

You can also call @[search|Searchable Plugin - Methods - search]@ with a @suggestQuery@ @[option|Searchable Plugin - Methods - search#Options]@, which returns search results for the original query, along with a suggested query.
{info}

The plugin provides a helper class to highlight the different terms in the suggested vs original query, _a la_ Google, etc. [More|Searchable Plugin - SearchableController and view#Suggested queries]


h2. Parameters

* *@query@* - A [query String|Searchable Plugin - Searching - String Queries]
* *@options@* - A @Map@ of [options|Searchable Plugin - Methods - suggestQuery#options]

h3. options

h4. Options affecting the search query

* *@escape@* - Should special characters be escaped? Default is @false@. [More|Searchable Plugin - Searching - String Queries#Advanced String Query Options]

h4. Options affecting the return value

* *@userFriendly@* - Should the suggested query look like a user-query? When @false@ returns queries as they are re-written and suggested by the search engine. Default is @true@.
* *@emulateCapitalisation@* - When @false@ returns a query as re-written and suggested by the search engine, which is usually all lowercase, when @true@ tries to emulate the upper-casing of the original query. Default is @true@
* *@allowSame@* - Can the method return the same query as the given @query@? This is possible if no better suggestions are found. If @false@, the method returns @null@ instead of allowing the same query. Default is @true@

h2. Returns

A suggested query @String@ or null

h2. Examples

{code}
// Get a suggested query, using all available class instances
// for spelling suggestions
def suggestedQuery = searchableService.suggestQuery("grate briton")
println "Did you mean ${suggestedQuery}"
{code}

{code}
// Get a suggested query using only searchable text from "Player" 
// instances for spelling suggestions, allowing for bad
// characters and disabling the user-friendly options
def suggestedQuery = Player.suggestQuery(
    "kartoon", 
    escape: true, userFriendly: false, emulateCapitalisation: false
)
println "Did you mean ${suggestedQuery}"
{code}