h1. Searchable Component

h2. Summary

Used to map [searchable components|Searchable Plugin - Mapping - Compass concepts#Searchable Component].

h2. Syntax

{code}
static searchable = {
    propertyName options
}
{code}

{code}
static searchable = {
    propertyName component: true
}
{code}

{code}
static searchable = {
    propertyName component: options
}
{code}

h2. Description

Maps the class's @propertyName@ property with the given [options|#Options].

You can use all three syntaxes when a [conventional mapping|Searchable Plugin - Mapping - Conventions] would give you a [searchable component|Searchable Plugin - Mapping - Compass concepts#Searchable Component].

When you want to change a [conventional searchable reference mapping|Searchable Plugin - Mapping - Conventions] (which is the normally how domain class associations are mapped), you can use either of the last two syntaxes to make it a [searchable component|Searchable Plugin - Mapping - Compass concepts#Searchable Component] instead.

h2. Parameters

* *@options@* - a @Map@ of [options|#Options]

h3. Options

* *@accessor@* - How the property is accessed. One of @"field"@ or @"property"@. Default is @"property"@
* *@cascade@* - The operations to cascade to the target association. A @String@ comma-delimited-list of values in @"all"@, @"create"@, @"save"@ and @"delete"@.
* *@converter@* - The name of a configured converter to use to convert the property value to/from text
* *@maxDepth@* - The depth of cyclic component references allowed. Default is @1@
* *@prefix@* - A @String@ prefix to apply to the component's properties. A prefix can be used to distinguish between multiple components of the same type. Without a prefix you can search within a component's properties with their property names, eg, @"city:london"@, with a prefix like @'homeAddress$'@ you can search for @'homeAddress$city:london'@

h2. Examples

{code}
// Provide a custom converter
metadata converter: "metadata\_converter"
{code}

{code}
// Map metadata as a component, overriding any conventional mapping
metadata component: true
{code}

{code}
// Map metadata as a component, overriding any conventional mapping
// and define some options
metadata component: [converter: "metadata\_converter"]
{code}